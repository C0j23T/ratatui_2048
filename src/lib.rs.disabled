use gameplay::PLAYERS;
use jni::{
    JNIEnv,
    objects::{JClass, JObject, JValueGen},
};
use structs::Player;

mod ascii;
mod data;
mod dialog;
mod gameplay;
mod math;
mod screens;
mod start;
mod structs;
mod utils;

#[unsafe(no_mangle)]
pub extern "system" fn Java_com_smoother_TacticalGrid2048_view_View_startAndJoin<'local>(
    mut _env: JNIEnv<'local>,
    _: JClass<'local>,
) {
}

#[unsafe(no_mangle)]
pub extern "system" fn Java_com_smoother_TacticalGrid2048_gameplay_Gameplay_play<'local>(
    mut env: JNIEnv<'local>,
    _: JClass<'local>,
    j_players: JObject<'local>,
    save: JObject<'local>,
) -> JObject<'local> {
    let size = env
        .call_method(&j_players, "size", "()I", &[])
        .unwrap()
        .i()
        .unwrap();
    let mut players = Vec::new();
    for i in 0..size {
        let player = env
            .call_method(
                &j_players,
                "get",
                "(I)Ljava/lang/Object;",
                &[jni::objects::JValueGen::Int(i)],
            )
            .unwrap();
        if let JValueGen::Object(o) = player {
            if let Some(player) = get_player_from_java(&mut env, o) {
                players.push(player)
            };
        }
    }

    let id = env.get_field(&save, "id", "I").unwrap().i().unwrap();
    let Some(save) = get_player_from_java(&mut env, save) else {
        panic!("Not player")
    };

    {
        let mut global_players = match PLAYERS.write() {
            Ok(x) => x,
            Err(e) => {
                env.throw(("java/lang/IllegalStateException", format!("{e:?}")))
                    .unwrap();
                return JObject::null();
            }
        };
        *global_players = players;
    }

    let result = match start::start_app(save) {
        Ok(x) => {
            if let Some(x) = x {
                x
            } else {
                return JObject::null();
            }
        }
        Err(e) => {
            env.throw(("java/io/IOException", format!("{e:?}")))
                .unwrap();
            return JObject::null();
        }
    };

    let name = env.new_string(result.name).unwrap();
    env.new_object(
        "com/smoother/TacticalGrid2048/entity/PlayerEntity",
        "ILjava/lang/String;IJJ",
        &[
            JValueGen::Int(id),
            JValueGen::Object(&name),
            JValueGen::Int(result.score),
            JValueGen::Long(result.time),
            JValueGen::Long(result.timestamp),
        ],
    )
    .unwrap()
}

fn get_player_from_java<'local>(env: &mut JNIEnv<'local>, o: JObject<'local>) -> Option<Player> {
    let clazz = env
        .find_class("com/smoother/TacticalGrid2048/entity/PlayerEntity")
        .unwrap();
    let flag = env
        .is_instance_of(env.get_object_class(&o).unwrap(), clazz)
        .unwrap();
    if !flag {
        return None;
    }

    let name = env.get_field(&o, "name", "Ljava/lang/String;").unwrap();
    let score = env.get_field(&o, "score", "I").unwrap().i().unwrap();
    let time = env.get_field(&o, "time", "J").unwrap().j().unwrap();
    let timestamp = env.get_field(o, "timestamp", "J").unwrap().j().unwrap();
    let name: String = if let JValueGen::Object(o) = name {
        if o.is_null() {
            String::new()
        } else {
            env.get_string((&o).into()).unwrap().into()
        }
    } else {
        return None;
    };

    Some(Player {
        name,
        score,
        time,
        timestamp,
    })
}
